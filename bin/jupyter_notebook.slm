#!/bin/bash
#SBATCH --partition=hpc
#SBATCH --nodes=1
#SBATCH --cpus-per-task=8
#SBATCH --output=jupyter_notebook/%j.log

PORT_RANGE_START=50200
PORT_RANGE_END=50300

# Help message
usage() {
    echo "Usage: $0 [<container_name>]"
    echo "Container_name:"
    echo "  Name of a singularity image containing jupyter notebook"
    exit 1
}

# load required modules
module load singularity
module load python


# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary.
workdir="${PWD}/jupyter_notebook"
mkdir -p -m 700 $workdir

# Parse options
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
        usage
        ;;
        *)
        # If not a recognized option, assume it's the container name/path
        CONTAINER_NAME="$1"
        shift
        ;;
    esac
done

# Check if container name is provided
if [[ -z "$CONTAINER_NAME" ]]; then
    echo "Error: Container name/path is required." >&2
    usage
fi

#get unused socket 
readonly PORT=$(python3 bin/get_free_port.py ${PORT_RANGE_START} ${PORT_RANGE_END})

# Check if container name is provided
if [[ -z "$PORT" ]]; then
    echo "Error: Cannot find a free port."
    exit
fi

# Create necessary directories to install libraries in the container
mkdir -p  ${workdir}/R/user-libs

# Create a temporary file to store the output
OUTPUT_FILE=$(mktemp)

# Run the singularity command in detached mode with token and password disabled
R_LIBS
nohup singularity exec -B ${workdir}/R/user-libs:${workdir}/R/user-libs --cleanenv --env R_LIBS_USER=${workdir}/R/user-libs "${CONTAINER_NAME}" start-notebook.py \
    --port="${PORT}" --NotebookApp.token='' --NotebookApp.password='' > "${OUTPUT_FILE}" 2>&1 &


# Capture the process ID (PID) of the background command
pid=$!

## Capture the command for the ssh tunnel
echo '!/bin/bash' > ~/.RJServer/tunnel.sh
printf "ssh -N -L 8888:${HOSTNAME}:${PORT} " > ~/.RJServer/tunnel.sh

# Wait for the process to finish
wait $pid

