#!/bin/bash
#SBATCH --signal=USR2
#SBATCH --ntasks=1
#SBATCH --output=jupyter_notebook/%j.log

PORT_RANGE_START=50200
PORT_RANGE_END=50300

# Help message
usage() {
    echo "Usage: $0 [<container_name>]"
    echo "Container_name:"
    echo "  Name of a singularity image containing jupyter notebook"
    exit 1
}


# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary. Adjust path as appropriate for your computing environment.
workdir="${PWD}/jupyter_notebook"
mkdir -p -m 700 $workdir

# Parse optionsi
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
        usage
        ;;
        *)
        # If not a recognized option, assume it's the container name/path
        CONTAINER_NAME="$1"
        shift
        ;;
    esac
done

# Check if container name is provided
if [[ -z "$CONTAINER_NAME" ]]; then
    echo "Error: Container name/path is required."
    usage
fi

# Bind directories
BINDINGS="${workdir}:/home/jovyan/work"

#get unused socket 
readonly PORT=$(python3 bin/get_free_port.py ${PORT_RANGE_START} ${PORT_RANGE_END})

# Check if container name is provided
if [[ -z "$PORT" ]]; then
    echo "Error: Cannot find a free port."
    exit
fi

# Create a temporary file to store the output
OUTPUT_FILE=$(mktemp)

# Run the singularity command in detached mode
nohup singularity exec --cleanenv -B "${BINDINGS}" "${CONTAINER_NAME}" start-notebook.py --port="${PORT}" > "${OUTPUT_FILE}" 2>&1 &

# Capture the process ID (PID) of the background command
pid=$!

# Initialize a variable to store the token
TOKEN=""

# Loop to check the output file periodically
for i in {1..10}; do
    # Check for the token in the output
    TOKEN=$(grep -m 1 -o "token=[^ ]*" "${OUTPUT_FILE}")

    if [ -n "${TOKEN}" ]; then
        break
    fi

    # Wait for 1 second before the next check
    sleep 1
done

# Check if token is empty (not found)
if [ -z "${TOKEN}" ]; then
    echo "Token not found"
    cat "${OUTPUT_FILE}"
    exit
fi

cat 1>&2 <<END
1. SSH tunnel from your workstation using the following command:

ssh -L 8888:${HOSTNAME}:${PORT} ${SINGULARITYENV_USER}@minastirith

2. Point your web browser to:
    
    http://localhost:8888/lab?${TOKEN}

When done using Jupyter Notebook, terminate the job by:

1. Close you Jupyter Notebook 
2. Issue the following command on the login node:
    scancel -f ${SLURM_JOB_ID}
END

# Wait for the process to finish
wait $pid

